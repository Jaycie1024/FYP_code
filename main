getwd()
setwd("C:/Users/Jaycie/OneDrive - City University of Hong Kong/Desktop/Final Year Project/R")
rm(list=ls())
graphics.off()

if (!require(pacman)) install.packages("pacman"); library(pacman)
p_load("xlsx")
p_load("data.table")
p_load("furrr")
p_load("dplyr")
p_load("ggplot2")
p_load("tibble")
p_load("tidyr")
p_load("purrr")
p_load("readr")
p_load("forcats")
p_load("biomaRt")
p_load_gh("MRCIEU/TwoSampleMR")
p_load_gh("MRCIEU/MRInstruments")
p_load_gh("slowkow/proxysnps")

#########################
###Running MR_Function###
#########################

MR <- function(input,outcome,wait=FALSE) {
  
  # System waiting for parallel processing ====================================
  
  if (wait) {
    wait_time <- runif(1, 0.5, 2) 
    Sys.sleep(wait_time)
  }
  
  # Clear previous results ====================================================
  
  exp <- NULL
  out <- NULL
  dat <- NULL
  res <- NULL
  ptest <- NULL
  output <- NULL
  
  # Format exposure data ======================================================
  
  exp <- suppressWarnings(format_data(input, type="exposure"))
  
  # Clump data if required ====================================================
  
  if (nrow(exp)>1) {
    
    exp <- clump_data(exp, clump_r2=0.01,clump_kb=5000)
    
  }
  
  # Extract outcome data ======================================================
  
  out <- suppressWarnings(extract_outcome_data(exp$SNP,
                                               outcome,
                                               proxies = 1,
                                               rsq = 0.8,
                                               align_alleles = 1,
                                               palindromes = 1,
                                               maf_threshold = 0.1))
  
  # Harmonise exposure and outcome data =======================================
  
  if (!is.null(out)) {
    
    dat <- harmonise_data(exposure_dat = exp,
                          outcome_dat = out)
    
    if(!is.null(dat)) {
      
      # Perform MR ================================================================
      
      if (nrow(dat)==1 && dat$mr_keep==TRUE) {
        
        res <- mr(dat, method_list = c("mr_wald_ratio"))
        
      } 
      
      if (nrow(dat)>1) {
        
        res <- mr(dat, method_list = c("mr_ivw","mr_egger_regression"))
        ptest <- mr_pleiotropy_test(dat)
        colnames(ptest) <- c("id.exposure","id.outcome","outcome","exposure",
                             "egger_intercept","egger_se","egger_pval")
        res <- merge(res,ptest)
        
      }
    }
  }
  
  # Save results ==============================================================
  
  if (!is.null(res)) {
    if (nrow(res)>0 & is.null(ptest)) {
      output <- res
      output$snps.mr <- paste(dat$SNP,collapse=";")
      output$beta.exposure <- paste(dat$beta.exposure,collapse=";")
      output$se.exposure <- paste(dat$se.exposure,collapse=";")
      output$pval.exposure <- paste(dat$pval.exposure,collapse=";")
      output$beta.outcome <- paste(dat$beta.outcome,collapse=";")
      output$se.outcome <- paste(dat$se.outcome,collapse=";")
      output$pval.outcome <- paste(dat$pval.outcome,collapse=";")
      output$egger_intercept <- NA
      output$egger_se <- NA
      output$egger_pval <- NA
    } 
    else if (nrow(res)>0 & !is.null(ptest)) {
      output <- res
      output$snps.mr <- paste(dat$SNP,collapse=";")
      output$beta.exposure <- paste(dat$beta.exposure,collapse=";")
      output$se.exposure <- paste(dat$se.exposure,collapse=";")
      output$pval.exposure <- paste(dat$pval.exposure,collapse=";")
      output$beta.outcome <- paste(dat$beta.outcome,collapse=";")
      output$se.outcome <- paste(dat$se.outcome,collapse=";")
      output$pval.outcome <- paste(dat$pval.outcome,collapse=";")
    } 
    else {
      output <- setNames(data.frame(matrix(ncol = 20, nrow = 1)),
                         c("id.exposure","id.outcome","outcome","exposure",
                           "method","nsnp","b","se","pval","snps.mr",
                           "egger_intercept","egger_se","egger_pval","snps.in",
                           "beta.exposure","se.exposure","pval.exposure",
                           "beta.outcome","se.outcome","pval.outcome"))
    } 
  } else {
    output <- setNames(data.frame(matrix(ncol = 20, nrow = 1)),
                       c("id.exposure","id.outcome","outcome","exposure",
                         "method","nsnp","b","se","pval","snps.mr",
                         "egger_intercept","egger_se","egger_pval","snps.in",
                         "beta.exposure","se.exposure","pval.exposure",
                         "beta.outcome","se.outcome","pval.outcome"))
  }
  
  output$snps.in <- paste(input$SNP,collapse=";")
  
  output$lci.mr <- output$b - qnorm(0.975)*output$se
  output$uci.mr <- output$b + qnorm(0.975)*output$se
  
  output <- output[,c("method","nsnp","b","lci.mr","uci.mr","se","pval",
                      "snps.mr","egger_intercept","egger_se","egger_pval","snps.in",
                      "beta.exposure","se.exposure","pval.exposure",
                      "beta.outcome","se.outcome","pval.outcome")]
  
  colnames(output) <- c("method","nsnp","beta.mr","lci.mr","uci.mr","se.mr","pval.mr",
                        "snps.mr","egger_intercept","egger_se","egger_pval","snps.in",
                        "beta.exposure","se.exposure","pval.exposure",
                        "beta.outcome","se.outcome","pval.outcome")
  
  return(output)
  
}


########################
#####clean_drugbank#####
########################

clean_drugbank <- function() {
  
  vocab <- read_csv("drugbank_vocabulary.csv")
  vocab$substance <- paste0(vocab$`Common name`," | ",vocab$Synonyms)
  vocab <- vocab[,c("DrugBank ID","substance")]
  colnames(vocab) <- c("drugbank_id","substance")
  vocab$substance <- gsub(" \\| ",";",vocab$substance) 
  vocab <- separate_rows(vocab,substance,sep = ";")
  
  active <- read_csv("drug_target_identifiers_all_pharmacologically_active_v5.1.9.csv")
  active <- active[,c("Gene Name","Drug IDs")]
  colnames(active) <- c("gene","drugbank_id")
  
  active <- separate_rows(active, drugbank_id)
  
  df <- merge(vocab,active,by = c("drugbank_id"),all.x = TRUE)
  
  df <- df[df$substance!="NA",]
  df$substance <- tolower(df$substance)
  df <- unique(df)
  
  return(df)
  
}

###################
#####clean_bnf#####
###################

clean_bnf <- function() {
  
  # Load BNF data ===============================================================
  
  df <- read_csv("exposure4.csv")
  
  # Format dataframe ============================================================
  
  df <- df[,c("Class of antidiabetic medication (route of administration)","Representative agents")]
  colnames(df) <- c("drug","substance")
  
  # Remove polypharmacy medines =================================================
  
  df <- df[!grepl("AND",df$drug,ignore.case = FALSE),]
  
  # Tidy drug substance information =============================================
  
  df$drug <- tolower(df$drug)
  df$substance <- tolower(df$substance)
  df <- df[!is.na(df$substance),]
  df <- df[!grepl("/",df$substance),]
  
  df <- unique(df)
  
  # Format drug names ===========================================================
  
  df$drug <- ifelse(df$drug=="alpha glucosidase inhibitors",
                    "A",df$drug)
  
  df$drug <- ifelse(df$drug=="biguanide",
                    "Biguanide",df$drug)
  
  df$drug <- ifelse(df$drug=="dipeptidyl peptidase 4 (dpp-iv) inhibitor",
                    "Dipeptidyl peptidase 4 (dpp-iv) inhibitor",df$drug)
  
  df$drug <- ifelse(df$drug=="GLP-1 agonists",
                    "Glucagon-like peptide 1 agonists",df$drug)
  
  df$drug <- ifelse(df$drug=="meglitinides",
                    "Meglitinides",df$drug)
  
  df$drug <- ifelse(df$drug=="insulins",
                    "Insulins",df$drug)
  
  df$drug <- ifelse(df$drug=="sodium-glucose cotransporter (SGLT2) inhibitor",
                    "Sodium-glucose cotransporter (SGLT2) inhibitor",df$drug)
  
  df$drug <- ifelse(df$drug=="sulfonylureas",
                    "Sulfonylureas",df$drug)
  
  df$drug <- ifelse(df$drug=="thiazolidinediones",
                    "Thiazolidinediones",df$drug)
  
  return(df)
  
}

bnf <- clean_bnf() 
drugbank <- clean_drugbank()
drug_targets <- merge(bnf,drugbank,all.x = TRUE)


###############################################################

drug_targets <- drug_targets[!is.na(drug_targets$gene),]

# Restrict to unique drug-gene pairs ==========================================

drug_targets  <- drug_targets[,c("drug","gene")]
drug_targets  <- unique(drug_targets)

gtex_path <- "data/gtex/GTEx_Analysis_v7_eQTL/"
gtex_data <- ".v7.egenes.txt"
tissues <- list.files(path = gtex_path,pattern = paste0("*",gtex_data))

input_exp <- data.frame(gene = rep(unique(drug_targets$gene),each = length(tissues)),
                        tissue = rep(tissues,times = length(unique(drug_targets$gene))),
                        stringsAsFactors = FALSE)

tmp_input_exp <- NULL

for (i in tissues) {
  
  tmp <- suppressWarnings(fread(paste0(gtex_path,i),
                                stringsAsFactors = FALSE,
                                data.table = FALSE))
  
  tmp <- tmp[tmp$gene_name %in% unique(drug_targets$gene),]
  
  tmp$tissue <- gsub(gtex_data,"",i)
  
  tmp_input_exp <- rbind(tmp_input_exp,tmp)
  
}

tmp_input_exp <- tmp_input_exp[,c("slope","ref","alt","gene_name","tissue","rs_id_dbSNP147_GRCh37p13",
                                  "gene_chr","gene_start","pval_nominal","slope_se")]

colnames(tmp_input_exp) <- c("beta.orig","other_allele.orig","effect_allele.orig","gene","tissue",
                             "SNP","chr_id","chr_pos","pvalue","se")

# Merge with full gene-tissue df ==============================================

input_exp$tissue <- gsub(".v7.egenes.txt","",input_exp$tissue)
input_exp <- merge(input_exp,tmp_input_exp,all.x = TRUE,by = c("gene","tissue"))

# Make all effects positive ===================================================
input_exp$beta <- ifelse(sign(input_exp$beta.orig)==1,input_exp$beta.orig,-1*input_exp$beta.orig)

input_exp$effect_allele <- ifelse(sign(input_exp$beta.orig)==1,input_exp$effect_allele.orig,input_exp$other_allele.orig)

input_exp$other_allele <- ifelse(sign(input_exp$beta.orig)==1,input_exp$other_allele.orig,input_exp$effect_allele.orig)

input_exp[,c("beta.orig","other_allele.orig","effect_allele.orig")] <- list(NULL)

# Remove unsuitable SNPs ======================================================

input_exp$keep <- ifelse(!is.na(input_exp$SNP) & input_exp$SNP!="." & nchar(input_exp$effect_allele)==1 & nchar(input_exp$other_allele)==1,TRUE,FALSE)

# Save MR input ===============================================================
##write.csv(input_exp,file="data/input_exp4.csv",row.names = FALSE,na = "")


# Conduct MR of expression on Glu =============================================

input_exp <- input_exp[input_exp$keep==TRUE,]
mr_express <- NULL


for (i in 1:nrow(input_exp)) {
  print(i)
  tmp_input_exp <- input_exp[i,]
  tmp_mr_express <- MR(tmp_input_exp,c('met-c-859'))
  tmp_mr_express$gene <- input_exp[i,]$gene
  tmp_mr_express$tissue <- input_exp[i,]$tissue
  mr_express <- rbind(mr_express,tmp_mr_express)
}

mr_express[,c("beta.exposure","se.exposure","pval.exposure")] <- NULL
input_exp <- input_exp[,c("gene","tissue","chr_id","chr_pos","beta","se","pvalue","effect_allele","other_allele")]
colnames(input_exp) <- c("gene","tissue","chr_id","chr_pos","beta.exposure","se.exposure","pval.exposure","effect_allele","other_allele")
mr_express <- merge(mr_express,input_exp,by=c("gene","tissue"),all.x = TRUE)

# Save output =================================================================

##write.csv(mr_express,file="data/mr_exp_glu4.csv",row.names = FALSE,na = "")


# LABEL GTEX TISSUES ===========================================================

gtexlab <- data.frame(rbind(c("Adipose_Subcutaneous","Adipose - Subcutaneous"),
                            c("Adipose_Visceral_Omentum","Adipose - Visceral (Omentum)"),
                            c("Adrenal_Gland","Adrenal Gland"),
                            c("Artery_Aorta","Artery - Aorta"),
                            c("Artery_Coronary","Artery - Coronary"),
                            c("Artery_Tibial","Artery - Tibial"),
                            c("Brain_Amygdala","Brain - Amygdala"),
                            c("Brain_Anterior_cingulate_cortex_BA24","Brain - Anterior cingulate cortex (BA24)"),
                            c("Brain_Caudate_basal_ganglia","Brain - Caudate (basal ganglia)"),
                            c("Brain_Cerebellar_Hemisphere","Brain - Cerebellar Hemisphere"),
                            c("Brain_Cerebellum","Brain - Cerebellum"),
                            c("Brain_Cortex","Brain - Cortex"),
                            c("Brain_Frontal_Cortex_BA9","Brain - Frontal Cortex (BA9)"),
                            c("Brain_Hippocampus","Brain - Hippocampus"),
                            c("Brain_Hypothalamus","Brain - Hypothalamus"),
                            c("Brain_Nucleus_accumbens_basal_ganglia","Brain - Nucleus accumbens (basal ganglia)"),
                            c("Brain_Putamen_basal_ganglia","Brain - Putamen (basal ganglia)"),
                            c("Brain_Spinal_cord_cervical_c-1","Brain - Spinal cord (cervical c-1)"),
                            c("Brain_Substantia_nigra","Brain - Substantia nigra"),
                            c("Breast_Mammary_Tissue","Breast - Mammary Tissue"),
                            c("Cells_EBV-transformed_lymphocytes","Cells - EBV-transformed lymphocytes"),
                            c("Cells_Transformed_fibroblasts","Cells - Transformed fibroblasts"),
                            c("Colon_Sigmoid","Colon - Sigmoid"),
                            c("Colon_Transverse","Colon - Transverse"),
                            c("Esophagus_Gastroesophageal_Junction","Esophagus - Gastroesophageal Junction"),
                            c("Esophagus_Mucosa","Esophagus - Mucosa"),
                            c("Esophagus_Muscularis","Esophagus - Muscularis"),
                            c("Heart_Atrial_Appendage","Heart - Atrial Appendage"),
                            c("Heart_Left_Ventricle","Heart - Left Ventricle"),
                            c("Liver","Liver"),
                            c("Lung","Lung"),
                            c("Minor_Salivary_Gland","Minor Salivary Gland"),
                            c("Muscle_Skeletal","Muscle - Skeletal"),
                            c("Nerve_Tibial","Nerve - Tibial"),
                            c("Ovary","Ovary"),
                            c("Pancreas","Pancreas"),
                            c("Pituitary","Pituitary"),
                            c("Prostate","Prostate"),
                            c("Skin_Not_Sun_Exposed_Suprapubic","Skin - Not Sun Exposed (Suprapubic)"),
                            c("Skin_Sun_Exposed_Lower_leg","Skin - Sun Exposed (Lower leg)"),
                            c("Small_Intestine_Terminal_Ileum","Small Intestine - Terminal Ileum"),
                            c("Spleen","Spleen"),
                            c("Stomach","Stomach"),
                            c("Testis","Testis"),
                            c("Thyroid","Thyroid"),
                            c("Uterus","Uterus"),
                            c("Vagina","Vagina"),
                            c("Whole_Blood","Whole Blood")))

colnames(gtexlab) <- c("tissue","tissue_di")

mr_exp_glu <- merge(mr_express,gtexlab)

# FORMAT DATA =================================================================
mr_exp_glu2<-mr_exp_glu
mr_exp_glu <- merge(mr_exp_glu2,drug_targets)
mr_exp_glu$ex_null <- ifelse(mr_exp_glu$lci.mr<0 & mr_exp_glu$uci.mr>0,NA,1)

# MARK GENES WITHOUT EVIDENCE FOR AN EFFECT ON Glu ============================

mr_exp_glu$proceed <- ifelse(!is.na(mr_exp_glu$beta.mr) & sign(mr_exp_glu$lci.mr)==sign(mr_exp_glu$uci.mr),1,0)

tmp <- mr_exp_glu %>% 
  group_by(gene) %>% 
  summarise(include = max(proceed)) %>%
  ungroup()

mr_exp_glu$gene_di <- ifelse(mr_exp_glu$gene %in% tmp[tmp$include==0,]$gene,
                             paste0(mr_exp_glu$gene,"*"),mr_exp_glu$gene)

ggplot(mr_exp_glu, aes(y = reorder(gene_di, desc(gene_di)), x = tissue_di)) +
  labs(y = "Target", x = "Tissue", fill = "Beta\n") +
  scale_x_discrete(position = "top") +
  scale_y_discrete(position = "right") +
  facet_grid(mr_exp_glu$drug~., scales = "free", space = "free", switch = "both") +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
        axis.text=element_text(size=8),
        axis.title=element_text(size=8),
        legend.position = "bottom",
        legend.text=element_text(size=8),
        legend.title=element_text(size=8),
        axis.text.x = element_text(angle = 90, hjust = 0),
        strip.text.y = element_text(angle = 180, hjust = 1, size=8),
        strip.background = element_blank()) +
  geom_tile(aes(fill = beta.mr)) +
  geom_point(aes(shape = factor(ex_null)), size = 0.5) +
  scale_shape_discrete(name  = " ",
                       breaks=c("1", "0"),
                       labels=c("95% CI excludes null", "Label")) +
  scale_fill_distiller(palette = "Spectral", direction = -1,
                       guide = "colourbar", limits = c(-0.2,0.2),
                       na.value = NA)
##ggsave("output/mr_exp_glu4.jpeg",width = 200, height = 300, unit = "mm", dpi = 600)

###############################################################################
mr_express <- mr_express[!is.na(mr_express$beta.mr) & sign(mr_express$lci.mr)==sign(mr_express$uci.mr),c("snps.in","gene")]

colnames(mr_express) <- c("SNP","gene")

mr_express <- unique(mr_express)

# Load Glu data ===============================================================

input_glu <- suppressWarnings(extract_outcome_data(mr_express$SNP,
                                                   c('met-c-859'),
                                                   proxies = FALSE))

input_glu <- input_glu[,c("beta.outcome","other_allele.outcome","effect_allele.outcome",
                          "SNP","pval.outcome","se.outcome")]

colnames(input_glu) <- c("beta.orig","other_allele.orig","effect_allele.orig",
                         "SNP","pvalue","se")

input_glu <- unique(input_glu)

# Make all effects positive ---------------------------------------------------

input_glu$beta <- ifelse(sign(input_glu$beta.orig)==1,input_glu$beta.orig,-1*input_glu$beta.orig)

input_glu$effect_allele <- ifelse(sign(input_glu$beta.orig)==1,input_glu$effect_allele.orig,input_glu$other_allele.orig)

input_glu$other_allele <- ifelse(sign(input_glu$beta.orig)==1,input_glu$other_allele.orig,input_glu$effect_allele.orig)

input_glu[,c("beta.orig","other_allele.orig","effect_allele.orig")] <- list(NULL)

# Merge with drug targets =====================================================

input_glu <- merge(input_glu,mr_express,by = c("SNP"))
input_glu <- merge(input_glu,drug_targets,by = c("gene"))

# Save ========================================================================

input_glu <- input_glu[,c(8,1:2,6:7,5,4,3)]
input_glu$unit <- "sd"


input_glu2 <-input_glu
head(input_glu2)

input_glu2$phenotype<- 'lowering glucose level'
exp_dat <- format_data(
  input_glu2,
  type='exposure',
  snp_col = "SNP",
  beta_col = "beta",
  se_col = "se",
  effect_allele_col ="effect_allele",
  other_allele_col = "other_allele",
  pval_col = "pvalue",
  phenotype_col = "phenotype"
)


outcome_gu<-read.csv("gwas_data/meta_skin1.csv",  sep = "\t", )
outcome_gu$phenotype<- 'skin cancer'
outcome_gu2<-filter(outcome_gu, P.value<1E-05)

outcome_dat <- format_data(
  dat=outcome_gu,
  type = "outcome",
  snps = input_glu2$SNP,
  header = TRUE,
  phenotype_col = "phenotype",
  snp_col = "MarkerName",
  beta_col = "Effect",
  se_col = "StdErr",
  effect_allele_col = "Allele1",
  other_allele_col = "Allele2",
  pval_col = "P.value",
)
H_data <- harmonise_data(
  exposure_dat = exp_dat, 
  outcome_dat = outcome_dat
)
leaveoneout_results<-mr_leaveoneout(H_data, parameters = default_parameters(), method = mr_ivw)
mr_leaveoneout_plot(leaveoneout_results)
ggsave("mr_output/skin.jpeg",width = 200, height = 300, unit = "mm", dpi = 600)



#for single cancer #########################################################
outcome_gu<-read_tsv("gwas_data/eye_cancer.tsv")
outcome_gu$phenotype<- 'eye_cancer'


outcome_dat <- format_data(
  dat=outcome_gu,
  type = "outcome",
  snps = input_glu2$SNP,
  header = TRUE,
  phenotype_col = "phenotype",
  snp_col = "variant_id",
  beta_col = "beta",
  se_col = "standard_error",
  effect_allele_col = "effect_allele",
  other_allele_col = "other_allele",
  pval_col = "p_value",
)
H_data <- harmonise_data(
  exposure_dat = exp_dat, 
  outcome_dat = outcome_dat
)

leaveoneout_results<-mr_leaveoneout(H_data, parameters = default_parameters(), method = mr_ivw)
mr_leaveoneout_plot(leaveoneout_results)
ggsave("mr_output/individual/eye_cancer.jpeg",width = 200, height = 300, unit = "mm", dpi = 600)

mr_results<-mr(H_data)
mr_results
mydata2<-mr_results


mydata1 <-merge(mydata1, mydata2, by = "outcome")









mr_results<-mr(H_data)
mr_results
mr_eye_eye<-mr_results
